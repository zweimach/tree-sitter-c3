================================================================================
Module declarations
================================================================================

module program::main;

import std::io;

fn void main() {
    io::printf("Hello, World!\n");
}

module foo_test::mod <Type1, Type2>;

import std::mem;

struct Foo
{
   Type1 a;
}

fn Type2 test(Type2 b, Foo *foo)
{
   return foo.a + b;
}

struct Stack
{
    usize capacity;
    usize size;
    Type1* elems;
}

---

(source_file
  (module_declaration
    name: (scoped_identifier
      path: (identifier)
      name: (identifier)))
  (import_declaration
    (scoped_identifier
      path: (identifier)
      name: (identifier)))
  (function_declaration
    return_type: (primitive_type)
    name: (identifier)
    parameters: (parameters)
    body: (compound_statement
      (expression_statement
        (call_expression
          function: (scoped_identifier
            path: (identifier)
            name: (identifier))
          arguments: (arguments
            (string_literal
              (escape_sequence)))))))
  (module_declaration
    name: (scoped_identifier
      path: (identifier)
      name: (identifier))
    parameters: (type_parameters
      (type_identifier)
      (type_identifier)))
  (import_declaration
    (scoped_identifier
      path: (identifier)
      name: (identifier)))
  (struct_declaration
    name: (type_identifier)
    body: (field_declarations
      (field_declaration
        type: (type_identifier)
        name: (identifier))))
  (function_declaration
    return_type: (type_identifier)
    name: (identifier)
    parameters: (parameters
      (parameter
        (type_identifier)
        (identifier))
      (parameter
        (pointer_type
          (type_identifier))
        (identifier)))
    body: (compound_statement
      (return_statement
        (binary_expression
          left: (field_expression
            value: (identifier)
            field: (identifier))
          right: (identifier)))))
  (struct_declaration
    name: (type_identifier)
    body: (field_declarations
      (field_declaration
        type: (primitive_type)
        name: (identifier))
      (field_declaration
        type: (primitive_type)
        name: (identifier))
      (field_declaration
        type: (pointer_type
          (type_identifier))
        name: (identifier)))))

================================================================================
Import declarations
================================================================================

import std::io;
import std::math;
import std::data::json;

---

(source_file
  (import_declaration
    (scoped_identifier
      (identifier)
      (identifier)))
  (import_declaration
    (scoped_identifier
      (identifier)
      (identifier)))
  (import_declaration
    (scoped_identifier
      (scoped_identifier
        (identifier)
        (identifier))
      (identifier))))

================================================================================
Define declarations
================================================================================

define CharPtr = char*;
define Numbers = int[10];
define Foo = distinct int;
define bar = foo;
define bar_var = foo_var;
define BarFoo = bar::Foo;
define bar_foo = bar::foo;
define FooFloat = foo_test::Foo<float, double>;
define testFloat = foo_test::test<float, double>;
define Callback = fn int(char* text, int value);

---

(source_file
  (define_declaration
    (type_identifier)
    (pointer_type
      (primitive_type)))
  (define_declaration
    (type_identifier)
    (array_type
      (primitive_type)
      (integer_literal)))
  (define_declaration
    (type_identifier)
    (primitive_type))
  (define_declaration
    (identifier)
    (identifier))
  (define_declaration
    (identifier)
    (identifier))
  (define_declaration
    (type_identifier)
    (scoped_type_identifier
      (identifier)
      (type_identifier)))
  (define_declaration
    (identifier)
    (scoped_identifier
      (identifier)
      (identifier)))
  (define_declaration
    (type_identifier)
    (scoped_type_identifier
      (identifier)
      (type_identifier))
    (type_parameters
      (primitive_type)
      (primitive_type)))
  (define_declaration
    (identifier)
    (scoped_identifier
      (identifier)
      (identifier))
    (type_parameters
      (primitive_type)
      (primitive_type)))
  (define_declaration
    (type_identifier)
    (function_pointer_type
      (primitive_type)
      (parameters
        (parameter
          (pointer_type
            (primitive_type))
          (identifier))
        (parameter
          (primitive_type)
          (identifier))))))

================================================================================
Function declarations
================================================================================

fn int! main(int argc, char** argv) {
    int ret = 0;
    return ret;
}

fn int add(int x, int y) @inline {
    return x + y;
}

fn int multiply(int x, int y = 1) {
    return x * y;
}

extern fn void printf(char* str, ...);

extern fn int sum(int... ints);

---

(source_file
  (function_declaration
    (failable_type
      (primitive_type))
    (identifier)
    (parameters
      (parameter
        (primitive_type)
        (identifier))
      (parameter
        (pointer_type
          (pointer_type
            (primitive_type)))
        (identifier)))
    (compound_statement
      (var_declaration
        (primitive_type)
        (identifier)
        (integer_literal))
      (return_statement
        (identifier))))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameters
      (parameter
        (primitive_type)
        (identifier))
      (parameter
        (primitive_type)
        (identifier)))
    (attributes
      (attribute
        (identifier)))
    (compound_statement
      (return_statement
        (binary_expression
          (identifier)
          (identifier)))))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameters
      (parameter
        (primitive_type)
        (identifier))
      (parameter
        (primitive_type)
        (identifier)
        (integer_literal)))
    (compound_statement
      (return_statement
        (binary_expression
          (identifier)
          (identifier)))))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameters
      (parameter
        (pointer_type
          (primitive_type))
        (identifier))
      (variadic_parameter)))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameters
      (variadic_parameter
        (primitive_type)
        (identifier)))))

================================================================================
Struct declarations
================================================================================

struct Person {
    char age;
    char* name;
}

struct Player @packed {
    inline Person p;
    char* name;
    uint health @aligned;
}

fn bool Player.is_alive(Player* p) {
    return p.health > 0;
}

---

(source_file
  (struct_declaration
    (type_identifier)
    (field_declarations
      (field_declaration
        (primitive_type)
        (identifier))
      (field_declaration
        (pointer_type
          (primitive_type))
        (identifier))))
  (struct_declaration
    (type_identifier)
    (attributes
      (attribute
        (identifier)))
    (field_declarations
      (field_declaration
        (type_identifier)
        (identifier))
      (field_declaration
        (pointer_type
          (primitive_type))
        (identifier))
      (field_declaration
        (primitive_type)
        (identifier)
        (attributes
          (attribute
            (identifier))))))
  (function_declaration
    (primitive_type)
    (type_identifier)
    (identifier)
    (parameters
      (parameter
        (pointer_type
          (type_identifier))
        (identifier)))
    (compound_statement
      (return_statement
        (binary_expression
          (field_expression
            (identifier)
            (identifier))
          (integer_literal))))))

============================================
Union declarations
============================================

union S {
    int x;
    float y;
    struct p {
        int z;
        float a;
    }
}

---

(source_file
  (union_declaration
    (type_identifier)
    (field_declarations
      (field_declaration
        (primitive_type)
        (identifier))
      (field_declaration
        (primitive_type)
        (identifier))
      (field_struct_declaration
        (identifier)
        (field_declarations
          (field_declaration
            (primitive_type)
            (identifier))
          (field_declaration
            (primitive_type)
            (identifier)))))))

================================================================================
Enum declarations
================================================================================

enum OptionTag @packed {
    SOME,
    NONE,
}

enum State : int {
    PENDING = 0,
    RUNNING,
    TERMINATED,
}

enum TokenKind @packed @opaque {
    KEYWORD,
    OPERATOR,
    FUNCTION,
}

---

(source_file
  (enum_declaration
    (type_identifier)
    (attributes
      (attribute
        (identifier)))
    (enumerators
      (enumerator
        (const_identifier))
      (enumerator
        (const_identifier))))
  (enum_declaration
    (type_identifier)
    (primitive_type)
    (enumerators
      (enumerator
        (const_identifier)
        (integer_literal))
      (enumerator
        (const_identifier))
      (enumerator
        (const_identifier))))
  (enum_declaration
    (type_identifier)
    (attributes
      (attribute
        (identifier))
      (attribute
        (identifier)))
    (enumerators
      (enumerator
        (const_identifier))
      (enumerator
        (const_identifier))
      (enumerator
        (const_identifier)))))

================================================================================
Error declarations
================================================================================

fault IoError
{
    FILE_NOT_FOUND,
    FILE_NOT_READABLE,
}

---

(source_file
  (error_declaration
    name: (type_identifier)
    body: (enumerators
      (enumerator
        name: (const_identifier))
      (enumerator
        name: (const_identifier)))))
