================================================================================
Function declarations
================================================================================

fn int! main(int argc, char** argv) {
    int ret = 0;
    return ret;
}

fn int add(int x, int y) @inline {
    return x + y;
}

fn int multiply(int x, int y = 1) {
    return x * y;
}

extern fn void printf(char* str, ...);

extern fn int sum(int... ints);

---

(source_file
  (function_declaration
    (failable_type
      (primitive_type))
    (identifier)
    (parameter_list
      (parameter
        (primitive_type)
        (identifier))
      (parameter
        (pointer_type
          (pointer_type
            (primitive_type)))
        (identifier)))
    (compound_statement
      (var_declaration
        (primitive_type)
        (identifier)
        (integer_literal))
      (return_statement
        (identifier))))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameter_list
      (parameter
        (primitive_type)
        (identifier))
      (parameter
        (primitive_type)
        (identifier)))
    (attribute_list
      (attribute
        (identifier)))
    (compound_statement
      (return_statement
        (binary_expression
          (identifier)
          (identifier)))))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameter_list
      (parameter
        (primitive_type)
        (identifier))
      (parameter
        (primitive_type)
        (identifier)
        (integer_literal)))
    (compound_statement
      (return_statement
        (binary_expression
          (identifier)
          (identifier)))))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameter_list
      (parameter
        (pointer_type
          (primitive_type))
        (identifier))
      (variadic_parameter)))
  (function_declaration
    (primitive_type)
    (identifier)
    (parameter_list
      (variadic_parameter
        (primitive_type)
        (identifier)))))

================================================================================
Struct declarations
================================================================================

struct Person {
    char age;
    char* name;
}

struct Player @packed {
    inline Person p;
    char* name;
    uint health @aligned;
}

---

(source_file
  (struct_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (primitive_type)
        (identifier))
      (field_declaration
        (pointer_type
          (primitive_type))
        (identifier))))
  (struct_declaration
    (type_identifier)
    (attribute_list
      (attribute
        (identifier)))
    (field_declaration_list
      (field_declaration
        (type_identifier)
        (identifier))
      (field_declaration
        (pointer_type
          (primitive_type))
        (identifier))
      (field_declaration
        (primitive_type)
        (identifier)
        (attribute_list
          (attribute
            (identifier)))))))

============================================
Union declarations
============================================

union S {
    int x;
    float y;
    struct p {
        int z;
        float a;
    }
}

---

(source_file
  (union_declaration
    (type_identifier)
    (field_declaration_list
      (field_declaration
        (primitive_type)
        (identifier))
      (field_declaration
        (primitive_type)
        (identifier))
      (field_struct_declaration
        (identifier)
        (field_declaration_list
          (field_declaration
            (primitive_type)
            (identifier))
          (field_declaration
            (primitive_type)
            (identifier)))))))

================================================================================
Enum declarations
================================================================================

enum OptionTag @packed {
    SOME,
    NONE,
}

enum State : int {
    PENDING = 0,
    RUNNING,
    TERMINATED,
}

enum TokenKind @packed @opaque {
    KeywordKind,
    OperatorKind,
    FunctionKind,
}

---

(source_file
  (enum_declaration
    (type_identifier)
    (attribute_list
      (attribute
        (identifier)))
    (enumerator_list
      (enumerator
        (identifier))
      (enumerator
        (identifier))))
  (enum_declaration
    (type_identifier)
    (primitive_type)
    (enumerator_list
      (enumerator
        (identifier)
        (integer_literal))
      (enumerator
        (identifier))
      (enumerator
        (identifier))))
  (enum_declaration
    (type_identifier)
    (attribute_list
      (attribute
        (identifier))
      (attribute
        (identifier)))
    (enumerator_list
      (enumerator
        (identifier))
      (enumerator
        (identifier))
      (enumerator
        (identifier)))))
