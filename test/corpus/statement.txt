================================================================================
If statements
================================================================================

if (true) false;
if (1) {
    0;
}
if (true) {
    0;
} else {
    1;
}
if (a) {
    0;
} else if (b) {
    1;
} else {
    2;
}

---

(source_file
  (if_statement
    (parenthesized_expression
      (boolean_literal))
    (expression_statement
      (boolean_literal)))
  (if_statement
    (parenthesized_expression
      (integer_literal))
    (compound_statement
      (expression_statement
        (integer_literal))))
  (if_statement
    (parenthesized_expression
      (boolean_literal))
    (compound_statement
      (expression_statement
        (integer_literal)))
    (compound_statement
      (expression_statement
        (integer_literal))))
  (if_statement
    (parenthesized_expression
      (identifier))
    (compound_statement
      (expression_statement
        (integer_literal)))
    (if_statement
      (parenthesized_expression
        (identifier))
      (compound_statement
        (expression_statement
          (integer_literal)))
      (compound_statement
        (expression_statement
          (integer_literal))))))

================================================================================
While statements
================================================================================

int i = 0;
while (i < 10) {
    i += 1;
    i++;
}
while (1) {
    print(1);
}
while (Point* p = getPoint())
{
    print(p.calculate());
}

---

(source_file
  (var_declaration
    (primitive_type)
    (identifier)
    (integer_literal))
  (while_statement
    (parenthesized_expression
      (binary_expression
        (identifier)
        (integer_literal)))
    (compound_statement
      (expression_statement
        (assignment_expression
          (identifier)
          (integer_literal)))
      (expression_statement
        (unary_expression
          (identifier)))))
  (while_statement
    (parenthesized_expression
      (integer_literal))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal))))))
  (while_statement
    (parenthesized_declaration
      (pointer_type
        (type_identifier))
      (identifier)
      (call_expression
        (identifier)
        (arguments)))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (call_expression
              (field_expression
                (identifier)
                (identifier))
              (arguments))))))))

================================================================================
For statements
================================================================================

for (int i = 0; i < 10; i++) {
    print(i);
}
for (i = 0; i < 10; i++) {
    print(i);
}
for (;;) {
    print(1);
}
for (; i < 10;) {
    print(1);
}
for (;; i++) {
    print(1);
}

---

(source_file
  (for_statement
    (var_declaration
      (primitive_type)
      (identifier)
      (integer_literal))
    (binary_expression
      (identifier)
      (integer_literal))
    (unary_expression
      (identifier))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (identifier))))))
  (for_statement
    (assignment_expression
      (identifier)
      (integer_literal))
    (binary_expression
      (identifier)
      (integer_literal))
    (unary_expression
      (identifier))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (identifier))))))
  (for_statement
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal))))))
  (for_statement
    (binary_expression
      (identifier)
      (integer_literal))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal))))))
  (for_statement
    (unary_expression
      (identifier))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal)))))))

================================================================================
Defer statements
================================================================================

defer free();
defer {
    i = i + 1;
    break;
}
defer {
    defer test1();
    test2();
    defer test3();
}

---

(source_file
  (defer_statement
    (expression_statement
      (call_expression
        (identifier)
        (arguments))))
  (defer_statement
    (compound_statement
      (expression_statement
        (assignment_expression
          (identifier)
          (binary_expression
            (identifier)
            (integer_literal))))
      (expression_statement
        (identifier))))
  (defer_statement
    (compound_statement
      (defer_statement
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))
      (expression_statement
        (call_expression
          (identifier)
          (arguments)))
      (defer_statement
        (expression_statement
          (call_expression
            (identifier)
            (arguments)))))))
