================================================================================
If statements
================================================================================

if (true) false;
if (1) {
    0;
}
if (true) {
    0;
} else {
    1;
}
if (a) {
    0;
} else if (b) {
    1;
} else {
    2;
}

---

(source_file
  (if_statement
    (parenthesized_expression
      (boolean_literal))
    (expression_statement
      (boolean_literal)))
  (if_statement
    (parenthesized_expression
      (integer_literal))
    (compound_statement
      (expression_statement
        (integer_literal))))
  (if_statement
    (parenthesized_expression
      (boolean_literal))
    (compound_statement
      (expression_statement
        (integer_literal)))
    (compound_statement
      (expression_statement
        (integer_literal))))
  (if_statement
    (parenthesized_expression
      (identifier))
    (compound_statement
      (expression_statement
        (integer_literal)))
    (if_statement
      (parenthesized_expression
        (identifier))
      (compound_statement
        (expression_statement
          (integer_literal)))
      (compound_statement
        (expression_statement
          (integer_literal))))))

================================================================================
While statements
================================================================================

int i = 0;
while (i < 10) {
    i += 1;
    i++;
}
while (1) {
    print(1);
}
while (Point* p = getPoint())
{
    print(p.calculate());
}

---

(source_file
  (var_declaration
    (primitive_type)
    (identifier)
    (integer_literal))
  (while_statement
    (parenthesized_expression
      (binary_expression
        (identifier)
        (integer_literal)))
    (compound_statement
      (expression_statement
        (assignment_expression
          (identifier)
          (integer_literal)))
      (expression_statement
        (unary_expression
          (identifier)))))
  (while_statement
    (parenthesized_expression
      (integer_literal))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal))))))
  (while_statement
    (parenthesized_declaration
      (pointer_type
        (type_identifier))
      (identifier)
      (call_expression
        (identifier)
        (arguments)))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (call_expression
              (field_expression
                (identifier)
                (identifier))
              (arguments))))))))

================================================================================
Do statements
================================================================================

do
{
  print(i);
};

---
(source_file
  (do_statement
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (identifier)))))))

================================================================================
For statements
================================================================================

for (int i = 0; i < 10; i++) {
    print(i);
}
for (i = 0; i < 10; i++) {
    print(i);
}
for (;;) {
    print(1);
}
for (; i < 10;) {
    print(1);
}
for (;; i++) {
    print(1);
}

---

(source_file
  (for_statement
    (var_declaration
      (primitive_type)
      (identifier)
      (integer_literal))
    (binary_expression
      (identifier)
      (integer_literal))
    (unary_expression
      (identifier))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (identifier))))))
  (for_statement
    (assignment_expression
      (identifier)
      (integer_literal))
    (binary_expression
      (identifier)
      (integer_literal))
    (unary_expression
      (identifier))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (identifier))))))
  (for_statement
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal))))))
  (for_statement
    (binary_expression
      (identifier)
      (integer_literal))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal))))))
  (for_statement
    (unary_expression
      (identifier))
    (compound_statement
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (integer_literal)))))))

================================================================================
Foreach statements
================================================================================

foreach (index, value : values)
{
    io::printfn("%d: %f", index, value);
}

---

(source_file
  (foreach_statement
    (identifier)
    (identifier)
    (identifier)
    (compound_statement
      (expression_statement
        (call_expression
          (scoped_identifier
            (identifier)
            (identifier))
          (arguments
            (string_literal)
            (identifier)
            (identifier)))))))

================================================================================
Defer statements
================================================================================

defer free();
defer {
    i = i + 1;
    break;
}
defer {
    defer test1();
    test2();
    defer test3();
}

---

(source_file
  (defer_statement
    (expression_statement
      (call_expression
        (identifier)
        (arguments))))
  (defer_statement
    (compound_statement
      (expression_statement
        (assignment_expression
          (identifier)
          (binary_expression
            (identifier)
            (integer_literal))))
      (expression_statement
        (identifier))))
  (defer_statement
    (compound_statement
      (defer_statement
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))
      (expression_statement
        (call_expression
          (identifier)
          (arguments)))
      (defer_statement
        (expression_statement
          (call_expression
            (identifier)
            (arguments)))))))

================================================================================
Switch statements
================================================================================

switch {
  case 1:
  case 2:
    a();
    nextcase;
  case 3:
    b();
  default:
    c();
    break;
}

switch {
  case true:
    return;
}

switch (i) {
  case 1:
    doSomething();
    nextcase;
  case 2:
    doSomethingElse();
}

switch (true)
{
    case x < 0:
        xless();
    case x > 0:
        xgreater();
    default:
        xequals();
}

switch {
  case foo() > 0:
    bar();
  case test() == 1:
    baz();
}

switch (i) {
  case 1:
    doSomething();
    nextcase 3;
  case 2:
    doSomethingElse();
  case 3:
    nextcase rand();
  default:
    io::println("Ended");
}

---

(source_file

  (switch_statement
    (switch_body
      (switch_case
        (integer_literal))

      (switch_case
        (integer_literal)
        (expression_statement
          (call_expression
          (identifier)
          (arguments)))
          (nextcase_declaration))

      (switch_case
        (integer_literal)
         (expression_statement
          (call_expression
          (identifier)
          (arguments))))

      (switch_default
         (expression_statement
          (call_expression
          (identifier)
          (arguments)))
        (expression_statement
          (identifier)))))

  (switch_statement
    (switch_body
      (switch_case
        (boolean_literal)
        (return_statement))))

  (switch_statement
    (parenthesized_expression
      (identifier))

    (switch_body

      (switch_case
        (integer_literal)
        (expression_statement
          (call_expression
            (identifier)
            (arguments)))
        (nextcase_declaration))

      (switch_case
        (integer_literal)
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))))

  (switch_statement
    (parenthesized_expression
      (boolean_literal))
    (switch_body
      (switch_case
        (binary_expression
          (identifier)
          (integer_literal))
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))
      (switch_case
        (binary_expression
          (identifier)
          (integer_literal))
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))
      (switch_default
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))))

  (switch_statement
    (switch_body
      (switch_case
        (binary_expression
          (call_expression
            (identifier)
            (arguments))
          (integer_literal))
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))
      (switch_case
        (binary_expression
          (call_expression
            (identifier)
            (arguments))
          (integer_literal))
        (expression_statement
          (call_expression
            (identifier)
            (arguments))))))

  (switch_statement
    (parenthesized_expression
      (identifier))

    (switch_body

      (switch_case
        (integer_literal)
        (expression_statement
          (call_expression
          (identifier)
          (arguments)))
        (nextcase_declaration
          (integer_literal)))

      (switch_case
        (integer_literal)
        (expression_statement
          (call_expression
          (identifier)
          (arguments))))

      (switch_case
        (integer_literal)
        (nextcase_declaration
          (call_expression
            (identifier)
            (arguments))))

      (switch_default
        (expression_statement
          (call_expression
            (scoped_identifier
              (identifier)
              (identifier))
                (arguments
                  (string_literal))))))))
